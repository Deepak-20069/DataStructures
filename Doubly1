package CONCEPTS_Day4;

public class Doubly1 {
    Node head;
    Node tail;

    class Node {
        int data;
        Node next;
        Node prev;

        Node(int val) {
            data = val;
            next = null;
            prev = null;
        }
    }

    public Doubly1() {
        head = null;
        tail = null;
    }

    public void insertAtBegin(int val) {
        Node newNode = new Node(val);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
    }

    public void insertAtAnyPos(int pos, int val) {
        if (pos == 1) {
            insertAtBegin(val);
            return;
        }
        Node newNode = new Node(val);
        Node temp = head;
        for (int i = 1; i < pos - 1 && temp != null; i++) {
            temp = temp.next;
        }
        if (temp == null) {
            System.out.println("Invalid position");
            return;
        }
        newNode.next = temp.next;
        newNode.prev = temp;
        if (temp.next != null) {
            temp.next.prev = newNode;
        }
        temp.next = newNode;
    }

    public void deleteAtBegin() {
        if (head == null) return;
        head = head.next;
        if (head != null) {
            head.prev = null;
        } else {
            tail = null; // If list becomes empty
        }
    }

    public void deleteAtPosition(int delpos) {
        if (head == null || delpos <= 0) return;
        Node temp = head;
        if (delpos == 1) {
            deleteAtBegin();
            return;
        }
        for (int i = 1; i < delpos && temp != null; i++) {
            temp = temp.next;
        }
        if (temp == null || temp.prev == null) return;
        temp.prev.next = temp.next;
        if (temp.next != null) {
            temp.next.prev = temp.prev;
        }
    }

    public void displayForward() {
        Node temp = head;
        System.out.print("Forward: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public void displayBackward() {
        Node temp = tail;
        System.out.print("Backward: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.prev;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Doubly1 list = new Doubly1();
        list.insertAtBegin(67);
        list.insertAtBegin(79);
        list.insertAtBegin(89);
        list.insertAtBegin(220);
        list.insertAtBegin(33);
        list.insertAtBegin(104);
        list.insertAtBegin(777);

        list.displayForward();
        list.displayBackward();

        list.insertAtAnyPos(4, 3333);
        list.displayForward();

        list.deleteAtPosition(4);
        list.displayForward();
    }
}
